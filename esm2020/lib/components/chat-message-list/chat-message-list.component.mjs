import { Component, Inject, Input, Optional, ViewChild, ViewChildren, } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime, filter, takeUntil } from 'rxjs/operators';
import { Direction } from '../../core/message';
import { BlockPlugin } from '../../services/adapters/xmpp/plugins/block.plugin';
import { MessageArchivePlugin } from '../../services/adapters/xmpp/plugins/message-archive.plugin';
import { CHAT_SERVICE_TOKEN } from '../../services/chat-service';
import { REPORT_USER_INJECTION_TOKEN } from '../../services/report-user-service';
import { ChatMessageComponent } from '../chat-message/chat-message.component';
import { MultiUserChatPlugin } from '../../services/adapters/xmpp/plugins/multi-user-chat/multi-user-chat.plugin';
import * as i0 from "@angular/core";
import * as i1 from "../../services/chat-list-state.service";
import * as i2 from "../../services/chat-message-list-registry.service";
import * as i3 from "../../services/contact-factory.service";
import * as i4 from "@angular/common";
import * as i5 from "../chat-message/chat-message.component";
import * as i6 from "../chat-message-simple/chat-message-simple.component";
import * as i7 from "../../directives/intersection-observer.directive";
var SubscriptionAction;
(function (SubscriptionAction) {
    SubscriptionAction[SubscriptionAction["PENDING_REQUEST"] = 0] = "PENDING_REQUEST";
    SubscriptionAction[SubscriptionAction["SHOW_BLOCK_ACTIONS"] = 1] = "SHOW_BLOCK_ACTIONS";
    SubscriptionAction[SubscriptionAction["NO_PENDING_REQUEST"] = 2] = "NO_PENDING_REQUEST";
})(SubscriptionAction || (SubscriptionAction = {}));
export class ChatMessageListComponent {
    constructor(chatListService, chatService, chatMessageListRegistry, reportUserService, changeDetectorRef, contactFactory) {
        this.chatListService = chatListService;
        this.chatService = chatService;
        this.chatMessageListRegistry = chatMessageListRegistry;
        this.reportUserService = reportUserService;
        this.changeDetectorRef = changeDetectorRef;
        this.contactFactory = contactFactory;
        this.Direction = Direction;
        this.SubscriptionAction = SubscriptionAction;
        this.subscriptionAction = SubscriptionAction.NO_PENDING_REQUEST;
        this.onTop$ = new Subject();
        this.ngDestroy = new Subject();
        this.isAtBottom = true;
        this.bottomLeftAt = 0;
        this.oldestVisibleMessageBeforeLoading = null;
        this.pendingRoomInvite = null;
        this.blockPlugin = this.chatService.getPlugin(BlockPlugin);
    }
    async ngOnInit() {
        this.onTop$
            .pipe(filter(event => event.isIntersecting), debounceTime(1000))
            .subscribe(() => this.loadOlderMessagesBeforeViewport());
        if (this.recipient.recipientType === 'contact') {
            this.recipient.pendingIn$
                .pipe(filter(pendingIn => pendingIn === true), takeUntil(this.ngDestroy))
                .subscribe(() => {
                this.subscriptionAction = SubscriptionAction.PENDING_REQUEST;
                this.scheduleScrollToLastMessage();
            });
            this.recipient.pendingRoomInvite$
                .pipe(filter(invite => invite != null), takeUntil(this.ngDestroy))
                .subscribe((invite) => this.pendingRoomInvite = invite);
        }
        this.chatMessageListRegistry.incrementOpenWindowCount(this.recipient);
    }
    async ngAfterViewInit() {
        this.chatMessageViewChildrenList.changes
            .subscribe(() => {
            if (this.oldestVisibleMessageBeforeLoading) {
                this.scrollToMessage(this.oldestVisibleMessageBeforeLoading);
            }
            this.oldestVisibleMessageBeforeLoading = null;
        });
        const messages$ = this.recipient.messages$;
        messages$
            .pipe(debounceTime(10), filter(() => this.isNearBottom()), takeUntil(this.ngDestroy))
            .subscribe((_) => this.scheduleScrollToLastMessage());
        if (this.recipient.messages.length < 10) {
            await this.loadMessages(); // in case insufficient old messages are displayed
        }
        this.scheduleScrollToLastMessage();
    }
    ngOnChanges(changes) {
        const contact = changes.contact;
        if (contact && contact.previousValue && contact.currentValue) {
            this.chatMessageListRegistry.decrementOpenWindowCount(contact.previousValue);
            this.chatMessageListRegistry.incrementOpenWindowCount(contact.currentValue);
        }
        if (contact && contact.currentValue) {
            this.scheduleScrollToLastMessage();
        }
    }
    ngOnDestroy() {
        this.ngDestroy.next();
        this.chatMessageListRegistry.decrementOpenWindowCount(this.recipient);
    }
    acceptSubscriptionRequest(event) {
        event.preventDefault();
        if (this.subscriptionAction === SubscriptionAction.PENDING_REQUEST) {
            this.chatService.addContact(this.recipient.jidBare.toString());
            this.subscriptionAction = SubscriptionAction.NO_PENDING_REQUEST;
            this.scheduleScrollToLastMessage();
        }
    }
    denySubscriptionRequest(event) {
        event.preventDefault();
        if (this.subscriptionAction === SubscriptionAction.PENDING_REQUEST) {
            this.chatService.removeContact(this.recipient.jidBare.toString());
            this.subscriptionAction = SubscriptionAction.SHOW_BLOCK_ACTIONS;
            this.scheduleScrollToLastMessage();
        }
    }
    scheduleScrollToLastMessage() {
        setTimeout(() => this.scrollToLastMessage(), 0);
    }
    blockContact($event) {
        $event.preventDefault();
        this.blockPlugin.blockJid(this.recipient.jidBare.toString());
        this.chatListService.closeChat(this.recipient);
        this.subscriptionAction = SubscriptionAction.NO_PENDING_REQUEST;
    }
    blockContactAndReport($event) {
        if (this.recipient.recipientType !== 'contact') {
            return;
        }
        $event.preventDefault();
        this.reportUserService.reportUser(this.recipient);
        this.blockContact($event);
    }
    dismissBlockOptions($event) {
        $event.preventDefault();
        this.subscriptionAction = SubscriptionAction.NO_PENDING_REQUEST;
    }
    subscriptionActionShown() {
        if (this.recipient.recipientType !== 'contact') {
            return false;
        }
        return this.subscriptionAction === SubscriptionAction.PENDING_REQUEST
            || (this.blockPlugin.supportsBlock$.getValue() === true && this.subscriptionAction === SubscriptionAction.SHOW_BLOCK_ACTIONS);
    }
    async loadOlderMessagesBeforeViewport() {
        if (this.isLoadingHistory() || this.isNearBottom()) {
            return;
        }
        try {
            this.oldestVisibleMessageBeforeLoading = this.recipient.oldestMessage;
            await this.loadMessages();
        }
        catch (e) {
            this.oldestVisibleMessageBeforeLoading = null;
        }
    }
    onBottom(event) {
        this.isAtBottom = event.isIntersecting;
        if (event.isIntersecting) {
            this.isAtBottom = true;
        }
        else {
            this.isAtBottom = false;
            this.bottomLeftAt = Date.now();
        }
    }
    getOrCreateContactWithFullJid(message) {
        if (this.recipient.recipientType === 'contact') {
            // this is not a multi user chat, just use recipient as contact
            return this.recipient;
        }
        const roomMessage = message;
        let matchingContact = this.chatService.contacts$.getValue().find(contact => contact.jidFull.equals(roomMessage.from));
        if (!matchingContact) {
            matchingContact = this.contactFactory.createContact(roomMessage.from.toString(), roomMessage.from.resource);
            this.chatService.contacts$.next([matchingContact].concat(this.chatService.contacts$.getValue()));
        }
        return matchingContact;
    }
    showPendingRoomInvite() {
        if (this.recipient.recipientType !== 'contact') {
            return false;
        }
        return this.pendingRoomInvite;
    }
    async acceptRoomInvite(event) {
        event.preventDefault();
        await this.chatService.getPlugin(MultiUserChatPlugin).joinRoom(this.pendingRoomInvite.roomJid);
        this.recipient.pendingRoomInvite$.next(null);
        this.pendingRoomInvite = null;
    }
    async declineRoomInvite(event) {
        event.preventDefault();
        await this.chatService.getPlugin(MultiUserChatPlugin).declineRoomInvite(this.pendingRoomInvite.roomJid);
        this.recipient.pendingRoomInvite$.next(null);
        this.pendingRoomInvite = null;
        this.chatService.removeContact(this.recipient.jidBare.toString());
    }
    scrollToLastMessage() {
        if (this.chatMessageAreaElement) {
            this.chatMessageAreaElement.nativeElement.scrollTop = this.chatMessageAreaElement.nativeElement.scrollHeight;
            this.isAtBottom = true; // in some browsers the intersection observer does not emit when scrolling programmatically
        }
    }
    scrollToMessage(message) {
        if (this.chatMessageAreaElement) {
            const htmlIdAttribute = 'message-' + message.id;
            const messageElement = document.getElementById(htmlIdAttribute);
            messageElement.scrollIntoView(false);
        }
    }
    async loadMessages() {
        try {
            // improve performance when loading lots of old messages
            this.changeDetectorRef.detach();
            await this.chatService.getPlugin(MessageArchivePlugin).loadMostRecentUnloadedMessages(this.recipient);
        }
        finally {
            this.changeDetectorRef.reattach();
        }
    }
    isNearBottom() {
        return this.isAtBottom || Date.now() - this.bottomLeftAt < 1000;
    }
    isLoadingHistory() {
        return !!this.oldestVisibleMessageBeforeLoading;
    }
}
ChatMessageListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.6", ngImport: i0, type: ChatMessageListComponent, deps: [{ token: i1.ChatListStateService }, { token: CHAT_SERVICE_TOKEN }, { token: i2.ChatMessageListRegistryService }, { token: REPORT_USER_INJECTION_TOKEN, optional: true }, { token: i0.ChangeDetectorRef }, { token: i3.ContactFactoryService }], target: i0.ɵɵFactoryTarget.Component });
ChatMessageListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.6", type: ChatMessageListComponent, selector: "ngx-chat-message-list", inputs: { recipient: "recipient", showAvatars: "showAvatars" }, viewQueries: [{ propertyName: "chatMessageAreaElement", first: true, predicate: ["messageArea"], descendants: true }, { propertyName: "chatMessageViewChildrenList", predicate: ChatMessageComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"chat-messages\" #messageArea>\n\n    <div class=\"chat-messages-start\" (ngxChatIntersectionObserver)=\"onTop$.next($event)\"></div>\n\n    <ng-container *ngFor=\"let dateMessagesGroup of recipient.dateMessagesGroups\">\n        <div class=\"chat-messages-date-group\">{{dateMessagesGroup.date | date:chatService.translations.dateFormat:undefined:chatService.translations.locale}}</div>\n        <ngx-chat-message\n                *ngFor=\"let message of dateMessagesGroup.messages\"\n                [id]=\"'message-' + message.id\"\n                [class.chat-message--in]=\"message.direction === Direction.in\"\n                [class.chat-message--out]=\"message.direction === Direction.out\"\n                [contact]=\"getOrCreateContactWithFullJid(message)\"\n                [nick]=\"message.direction === Direction.in ? getOrCreateContactWithFullJid(message).name : ''\"\n                [avatar]=\"getOrCreateContactWithFullJid(message).avatar\"\n                [message]=\"message\"\n                [showAvatars]=\"showAvatars\">\n        </ngx-chat-message>\n    </ng-container>\n\n    <div class=\"chat-messages-empty\" *ngIf=\"recipient.messages.length === 0\">\n        {{chatService.translations.noMessages}}\n    </div>\n\n    <ngx-chat-message-simple\n            [direction]=\"Direction.in\"\n            [avatar]=\"undefined\"\n            [footerHidden]=\"true\"\n            *ngIf=\"showPendingRoomInvite()\"\n    >\n        <ul class=\"chat-presence-subscription-actions\">\n            <li>\n                <a (click)=\"acceptRoomInvite($event)\" href=\"#\">Join</a>\n            </li>\n            <li>\n                <a (click)=\"declineRoomInvite($event)\" href=\"#\">Decline</a>\n            </li>\n        </ul>\n    </ngx-chat-message-simple>\n\n    <ngx-chat-message-simple\n            [direction]=\"Direction.in\"\n            [avatar]=\"showAvatars ? recipient.avatar : undefined\"\n            [footerHidden]=\"true\"\n            *ngIf=\"subscriptionActionShown()\"\n    >\n        <span>\n            {{chatService.translations.subscriptionRequestMessage}}\n        </span>\n        <ul class=\"chat-presence-subscription-actions\">\n            <li>\n                <span class=\"action-disabled\"\n                      *ngIf=\"subscriptionAction === SubscriptionAction.SHOW_BLOCK_ACTIONS\"\n                >{{chatService.translations.acceptSubscriptionRequest}}</span>\n\n                <a *ngIf=\"subscriptionAction === SubscriptionAction.PENDING_REQUEST\"\n                   (click)=\"acceptSubscriptionRequest($event)\"\n                   href=\"#\"\n                >{{chatService.translations.acceptSubscriptionRequest}}</a>\n            </li>\n\n            <li>\n                <span class=\"action-disabled\"\n                      *ngIf=\"subscriptionAction === SubscriptionAction.SHOW_BLOCK_ACTIONS\"\n                >{{chatService.translations.denySubscriptionRequest}}</span>\n\n                <a *ngIf=\"subscriptionAction === SubscriptionAction.PENDING_REQUEST\"\n                   (click)=\"denySubscriptionRequest($event)\"\n                   href=\"#\"\n                >{{chatService.translations.denySubscriptionRequest}}</a>\n            </li>\n        </ul>\n        <ul class=\"deny-actions\"\n            *ngIf=\"(blockPlugin.supportsBlock$ | async) === true && subscriptionAction === SubscriptionAction.SHOW_BLOCK_ACTIONS\">\n            <li>\n                <a (click)=\"blockContact($event)\" href=\"#\">{{chatService.translations.block}}</a>\n            </li>\n            <li *ngIf=\"reportUserService\">\n                <a (click)=\"blockContactAndReport($event)\" href=\"#\">{{chatService.translations.blockAndReport}}</a>\n            </li>\n            <li>\n                <a (click)=\"dismissBlockOptions($event)\" href=\"#\">{{chatService.translations.dismiss}}</a>\n            </li>\n        </ul>\n    </ngx-chat-message-simple>\n\n    <div class=\"chat-messages-end\" (ngxChatIntersectionObserver)=\"onBottom($event)\"></div>\n\n</div>\n", styles: [":host.chat-message--out{align-self:flex-end}:host.chat-message--in{align-self:flex-start}.chat-messages{display:flex;flex-direction:column;min-height:10em;max-height:20em;overflow-y:scroll}.chat-messages-date-group{font-size:.7em;font-style:italic;margin:.5em 0;text-align:center}ngx-chat-message,ngx-chat-message-simple{max-width:76%;align-self:flex-start;animation-duration:1.5s;animation-timing-function:cubic-bezier(.16,1,.3,1)}ngx-chat-message.chat-message--in,ngx-chat-message-simple.chat-message--in{animation-name:ngx-chat-message-in}ngx-chat-message.chat-message--out,ngx-chat-message-simple.chat-message--out{animation-name:ngx-chat-message-out}.chat-messages-empty{text-align:center;font-size:1.5em;color:#999;margin-top:1em;margin-bottom:1em}.chat-presence-subscription-actions,.deny-actions{list-style:none;padding:0;margin:1em 0 0}.chat-presence-subscription-actions a,.deny-actions a,.chat-presence-subscription-actions a:visited,.deny-actions a:visited{color:#198cff}.deny-actions{margin-top:1em}.action-disabled{color:#999}.chat-messages-start{min-height:5px;height:5px;margin-top:5px}.chat-messages-end{min-height:5px;height:5px;margin-bottom:5px}\n"], dependencies: [{ kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i5.ChatMessageComponent, selector: "ngx-chat-message", inputs: ["showAvatars", "avatar", "message", "nick", "contact", "showMessageReadState"] }, { kind: "component", type: i6.ChatMessageSimpleComponent, selector: "ngx-chat-message-simple", inputs: ["avatar", "avatarInteractive", "direction", "formattedDate", "footerHidden", "mediaLink", "isImage", "isAudio", "showImagePlaceholder", "messageState", "nick"], outputs: ["avatarClickHandler"] }, { kind: "directive", type: i7.IntersectionObserverDirective, selector: "[ngxChatIntersectionObserver]", outputs: ["ngxChatIntersectionObserver"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.DatePipe, name: "date" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.6", ngImport: i0, type: ChatMessageListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-chat-message-list', template: "<div class=\"chat-messages\" #messageArea>\n\n    <div class=\"chat-messages-start\" (ngxChatIntersectionObserver)=\"onTop$.next($event)\"></div>\n\n    <ng-container *ngFor=\"let dateMessagesGroup of recipient.dateMessagesGroups\">\n        <div class=\"chat-messages-date-group\">{{dateMessagesGroup.date | date:chatService.translations.dateFormat:undefined:chatService.translations.locale}}</div>\n        <ngx-chat-message\n                *ngFor=\"let message of dateMessagesGroup.messages\"\n                [id]=\"'message-' + message.id\"\n                [class.chat-message--in]=\"message.direction === Direction.in\"\n                [class.chat-message--out]=\"message.direction === Direction.out\"\n                [contact]=\"getOrCreateContactWithFullJid(message)\"\n                [nick]=\"message.direction === Direction.in ? getOrCreateContactWithFullJid(message).name : ''\"\n                [avatar]=\"getOrCreateContactWithFullJid(message).avatar\"\n                [message]=\"message\"\n                [showAvatars]=\"showAvatars\">\n        </ngx-chat-message>\n    </ng-container>\n\n    <div class=\"chat-messages-empty\" *ngIf=\"recipient.messages.length === 0\">\n        {{chatService.translations.noMessages}}\n    </div>\n\n    <ngx-chat-message-simple\n            [direction]=\"Direction.in\"\n            [avatar]=\"undefined\"\n            [footerHidden]=\"true\"\n            *ngIf=\"showPendingRoomInvite()\"\n    >\n        <ul class=\"chat-presence-subscription-actions\">\n            <li>\n                <a (click)=\"acceptRoomInvite($event)\" href=\"#\">Join</a>\n            </li>\n            <li>\n                <a (click)=\"declineRoomInvite($event)\" href=\"#\">Decline</a>\n            </li>\n        </ul>\n    </ngx-chat-message-simple>\n\n    <ngx-chat-message-simple\n            [direction]=\"Direction.in\"\n            [avatar]=\"showAvatars ? recipient.avatar : undefined\"\n            [footerHidden]=\"true\"\n            *ngIf=\"subscriptionActionShown()\"\n    >\n        <span>\n            {{chatService.translations.subscriptionRequestMessage}}\n        </span>\n        <ul class=\"chat-presence-subscription-actions\">\n            <li>\n                <span class=\"action-disabled\"\n                      *ngIf=\"subscriptionAction === SubscriptionAction.SHOW_BLOCK_ACTIONS\"\n                >{{chatService.translations.acceptSubscriptionRequest}}</span>\n\n                <a *ngIf=\"subscriptionAction === SubscriptionAction.PENDING_REQUEST\"\n                   (click)=\"acceptSubscriptionRequest($event)\"\n                   href=\"#\"\n                >{{chatService.translations.acceptSubscriptionRequest}}</a>\n            </li>\n\n            <li>\n                <span class=\"action-disabled\"\n                      *ngIf=\"subscriptionAction === SubscriptionAction.SHOW_BLOCK_ACTIONS\"\n                >{{chatService.translations.denySubscriptionRequest}}</span>\n\n                <a *ngIf=\"subscriptionAction === SubscriptionAction.PENDING_REQUEST\"\n                   (click)=\"denySubscriptionRequest($event)\"\n                   href=\"#\"\n                >{{chatService.translations.denySubscriptionRequest}}</a>\n            </li>\n        </ul>\n        <ul class=\"deny-actions\"\n            *ngIf=\"(blockPlugin.supportsBlock$ | async) === true && subscriptionAction === SubscriptionAction.SHOW_BLOCK_ACTIONS\">\n            <li>\n                <a (click)=\"blockContact($event)\" href=\"#\">{{chatService.translations.block}}</a>\n            </li>\n            <li *ngIf=\"reportUserService\">\n                <a (click)=\"blockContactAndReport($event)\" href=\"#\">{{chatService.translations.blockAndReport}}</a>\n            </li>\n            <li>\n                <a (click)=\"dismissBlockOptions($event)\" href=\"#\">{{chatService.translations.dismiss}}</a>\n            </li>\n        </ul>\n    </ngx-chat-message-simple>\n\n    <div class=\"chat-messages-end\" (ngxChatIntersectionObserver)=\"onBottom($event)\"></div>\n\n</div>\n", styles: [":host.chat-message--out{align-self:flex-end}:host.chat-message--in{align-self:flex-start}.chat-messages{display:flex;flex-direction:column;min-height:10em;max-height:20em;overflow-y:scroll}.chat-messages-date-group{font-size:.7em;font-style:italic;margin:.5em 0;text-align:center}ngx-chat-message,ngx-chat-message-simple{max-width:76%;align-self:flex-start;animation-duration:1.5s;animation-timing-function:cubic-bezier(.16,1,.3,1)}ngx-chat-message.chat-message--in,ngx-chat-message-simple.chat-message--in{animation-name:ngx-chat-message-in}ngx-chat-message.chat-message--out,ngx-chat-message-simple.chat-message--out{animation-name:ngx-chat-message-out}.chat-messages-empty{text-align:center;font-size:1.5em;color:#999;margin-top:1em;margin-bottom:1em}.chat-presence-subscription-actions,.deny-actions{list-style:none;padding:0;margin:1em 0 0}.chat-presence-subscription-actions a,.deny-actions a,.chat-presence-subscription-actions a:visited,.deny-actions a:visited{color:#198cff}.deny-actions{margin-top:1em}.action-disabled{color:#999}.chat-messages-start{min-height:5px;height:5px;margin-top:5px}.chat-messages-end{min-height:5px;height:5px;margin-bottom:5px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ChatListStateService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [CHAT_SERVICE_TOKEN]
                }] }, { type: i2.ChatMessageListRegistryService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [REPORT_USER_INJECTION_TOKEN]
                }] }, { type: i0.ChangeDetectorRef }, { type: i3.ContactFactoryService }]; }, propDecorators: { recipient: [{
                type: Input
            }], showAvatars: [{
                type: Input
            }], chatMessageAreaElement: [{
                type: ViewChild,
                args: ['messageArea']
            }], chatMessageViewChildrenList: [{
                type: ViewChildren,
                args: [ChatMessageComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,