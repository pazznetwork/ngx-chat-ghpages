import { animate, state, style, transition, trigger } from '@angular/animations';
import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { MultiUserChatPlugin } from '../../services/adapters/xmpp/plugins/multi-user-chat/multi-user-chat.plugin';
import { CHAT_SERVICE_TOKEN } from '../../services/chat-service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/chat-list-state.service";
import * as i2 from "@angular/common";
import * as i3 from "../roster-recipient/roster-recipient.component";
export class RosterListComponent {
    constructor(chatService, chatListService) {
        this.chatService = chatService;
        this.chatListService = chatListService;
        this.rosterStateChanged = new EventEmitter();
        this.multiUserChatPlugin = this.chatService.getPlugin(MultiUserChatPlugin);
    }
    ngOnInit() {
        if (!this.contacts) {
            this.contacts = this.chatService.contactsSubscribed$;
        }
        if (!this.contactRequestsReceived$) {
            this.contactRequestsReceived$ = this.chatService.contactRequestsReceived$;
        }
        if (!this.contactRequestsSent$) {
            this.contactRequestsSent$ = this.chatService.contactRequestsSent$;
        }
        if (!this.contactsUnaffiliated$) {
            this.contactsUnaffiliated$ = this.chatService.contactsUnaffiliated$;
        }
        this.hasNoContacts$ = combineLatest([
            this.contacts,
            this.contactRequestsReceived$,
            this.contactRequestsSent$,
            this.contactsUnaffiliated$,
        ]).pipe(map(([contacts, received, sent, unaffiliated]) => contacts.length + received.length + sent.length + unaffiliated.length === 0));
    }
    onClickRecipient(recipient) {
        this.chatListService.openChat(recipient);
    }
    toggleVisibility() {
        const newState = this.rosterState === 'shown' ? 'hidden' : 'shown';
        this.rosterStateChanged.emit(newState);
    }
}
RosterListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.7", ngImport: i0, type: RosterListComponent, deps: [{ token: CHAT_SERVICE_TOKEN }, { token: i1.ChatListStateService }], target: i0.ɵɵFactoryTarget.Component });
RosterListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.7", type: RosterListComponent, selector: "ngx-chat-roster-list", inputs: { rosterState: "rosterState", contacts: "contacts", contactRequestsReceived$: "contactRequestsReceived$", contactRequestsSent$: "contactRequestsSent$", contactsUnaffiliated$: "contactsUnaffiliated$" }, outputs: { rosterStateChanged: "rosterStateChanged" }, ngImport: i0, template: "<div class=\"roster-drawer\" (click)=\"toggleVisibility()\" [@drawerVisibility]=\"rosterState\">\n    <div class=\"roster-drawer__button\" *ngIf=\"rosterState === 'shown'\">&raquo;</div>\n    <div class=\"roster-drawer__button\" *ngIf=\"rosterState === 'hidden'\">&laquo;</div>\n</div>\n\n<div class=\"roster-list\" [@rosterVisibility]=\"rosterState\" [attr.data-ngx-chat-state]=\"chatService.state$ | async\">\n\n    <div class=\"roster-header\">\n        {{ chatService.translations.chat }}\n    </div>\n\n    <ng-container *ngIf=\"(multiUserChatPlugin.rooms$ | async) as rooms\">\n        <ng-container *ngIf=\"rooms.length > 0\">\n            <div class=\"roster-group-header\">{{chatService.translations.rooms}}</div>\n\n            <div class=\"contact-list-wrapper\">\n                <ngx-chat-roster-recipient\n                        *ngFor=\"let room of rooms\"\n                        [recipient]=\"room\"\n                        (click)=\"onClickRecipient(room)\">\n                </ngx-chat-roster-recipient>\n            </div>\n        </ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"(contacts | async).length > 0\">\n        <div class=\"roster-group-header\">{{chatService.translations.contacts}}</div>\n\n        <div class=\"contact-list-wrapper\">\n\n            <ngx-chat-roster-recipient\n                    *ngFor=\"let contact of (contacts | async)\"\n                    [recipient]=\"contact\"\n                    (click)=\"onClickRecipient(contact)\">\n            </ngx-chat-roster-recipient>\n\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"(contactRequestsReceived$ | async).length > 0\">\n        <div class=\"roster-group-header\">{{chatService.translations.contactRequestIn}}</div>\n        <div class=\"contact-list-wrapper\">\n\n            <ngx-chat-roster-recipient\n                    *ngFor=\"let contact of (contactRequestsReceived$ | async)\"\n                    [recipient]=\"contact\"\n                    (click)=\"onClickRecipient(contact)\">\n            </ngx-chat-roster-recipient>\n\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"(contactRequestsSent$ | async).length > 0\">\n        <div class=\"roster-group-header\">{{chatService.translations.contactRequestOut}}</div>\n        <div class=\"contact-list-wrapper\">\n\n            <ngx-chat-roster-recipient\n                    *ngFor=\"let contact of (contactRequestsSent$ | async)\"\n                    [recipient]=\"contact\"\n                    (click)=\"onClickRecipient(contact)\">\n            </ngx-chat-roster-recipient>\n\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"(contactsUnaffiliated$ | async).length > 0\">\n        <div class=\"roster-group-header\">{{chatService.translations.contactsUnaffiliated}}</div>\n        <div class=\"contact-list-wrapper\">\n\n            <ng-container *ngFor=\"let contact of (contactsUnaffiliated$ | async)\">\n                <ngx-chat-roster-recipient\n                        *ngIf=\"contact.messages.length > 0\"\n                        [recipient]=\"contact\"\n                        (click)=\"onClickRecipient(contact)\">\n                </ngx-chat-roster-recipient>\n            </ng-container>\n\n        </div>\n    </ng-container>\n\n    <div class=\"roster-list__empty\" *ngIf=\"hasNoContacts$ | async\">\n        {{chatService.translations.noContacts}}\n    </div>\n\n    <ng-container *ngIf=\"chatService.enableDebugging\">\n        <hr/>\n\n        <div class=\"contact-pending-request-received-wrapper\">\n            debug contact requests in:\n            <div class=\"contact-pending-request-received\"\n                 *ngFor=\"let request of (chatService.contactRequestsReceived$ | async)\">\n                {{request.name}}\n            </div>\n        </div>\n\n        <hr/>\n\n        <div class=\"contact-pending-request-sent-wrapper\">\n            debug contact requests out:\n            <div class=\"contact-pending-request-sent\"\n                 *ngFor=\"let request of (chatService.contactRequestsSent$ | async)\">\n                {{request.name}}\n            </div>\n        </div>\n\n        <hr/>\n\n        <p>\n            debug contacts (count: {{ (chatService.contacts$ | async).length }})<br/>\n        </p>\n        <p *ngFor=\"let contact of (chatService.contacts$|async)\" style=\"margin-bottom: 1em\">\n            <em>{{contact.name}}:</em><br/>\n            subscription={{contact.subscription$ | async}}<br/>\n            presence={{contact.presence$ | async}}<br/>\n            pendingIn={{contact.pendingIn$ | async}}<br/>\n            pendingOut={{contact.pendingOut$ | async}}\n        </p>\n        <p class=\"roster-debug-state\">state: {{chatService.state$ | async}}</p>\n    </ng-container>\n\n    <!--\n    <div class=\"roster-footer\">\n    </div>\n    -->\n</div>\n", styles: ["@keyframes ngx-chat-message-in{0%{transform:translate(50px);opacity:0}to{transform:none;opacity:1}}@keyframes ngx-chat-message-out{0%{transform:translate(-50px);opacity:0}to{transform:none;opacity:1}}*{box-sizing:border-box;margin:0;padding:0;font-family:Helvetica,Arial,serif}.roster-list{position:fixed;top:0;bottom:0;right:0;width:14em;overflow-y:auto;border-left:1px solid #e1e1e1;z-index:80;margin-left:10px;background-color:#f5f5f5;text-align:left;padding:.5em .5em 0;display:flex;flex-direction:column}.roster-list .roster-header{text-align:center;margin-bottom:1em}.roster-list .roster-group-header{border-bottom:1px solid #e1e1e1;padding-bottom:.5em}.roster-list .roster-footer{border-top:1px solid #e1e1e1;width:14em;padding-top:.5em}.roster-list .contact-list-wrapper{margin-bottom:1em}.roster-list ngx-chat-roster-recipient{display:block;padding:.5em}.roster-list ngx-chat-roster-recipient:hover{background-color:#e8e8e8;cursor:pointer}.roster-list__empty{color:#999;text-align:center;margin-top:.5em;font-size:1.5em}.roster-drawer{top:0;bottom:0;right:14em;width:1em;position:fixed;z-index:80;cursor:pointer}.roster-drawer:hover{background-color:#1e1e1e33}.roster-drawer__button{top:50%;color:transparent;background-color:transparent;position:fixed;margin-left:.4rem}.roster-drawer:hover .roster-drawer__button{color:#fff}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.RosterRecipientComponent, selector: "ngx-chat-roster-recipient", inputs: ["recipient"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }], animations: [
        trigger('rosterVisibility', [
            state('hidden', style({
                right: '-14em',
            })),
            state('shown', style({
                right: '0em',
            })),
            transition('hidden => shown', animate('400ms ease')),
            transition('shown => hidden', animate('400ms ease')),
        ]),
        trigger('drawerVisibility', [
            state('hidden', style({
                right: '0em',
            })),
            state('shown', style({
                right: '14em',
            })),
            transition('hidden => shown', animate('400ms ease')),
            transition('shown => hidden', animate('400ms ease')),
        ]),
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.7", ngImport: i0, type: RosterListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-chat-roster-list', animations: [
                        trigger('rosterVisibility', [
                            state('hidden', style({
                                right: '-14em',
                            })),
                            state('shown', style({
                                right: '0em',
                            })),
                            transition('hidden => shown', animate('400ms ease')),
                            transition('shown => hidden', animate('400ms ease')),
                        ]),
                        trigger('drawerVisibility', [
                            state('hidden', style({
                                right: '0em',
                            })),
                            state('shown', style({
                                right: '14em',
                            })),
                            transition('hidden => shown', animate('400ms ease')),
                            transition('shown => hidden', animate('400ms ease')),
                        ]),
                    ], template: "<div class=\"roster-drawer\" (click)=\"toggleVisibility()\" [@drawerVisibility]=\"rosterState\">\n    <div class=\"roster-drawer__button\" *ngIf=\"rosterState === 'shown'\">&raquo;</div>\n    <div class=\"roster-drawer__button\" *ngIf=\"rosterState === 'hidden'\">&laquo;</div>\n</div>\n\n<div class=\"roster-list\" [@rosterVisibility]=\"rosterState\" [attr.data-ngx-chat-state]=\"chatService.state$ | async\">\n\n    <div class=\"roster-header\">\n        {{ chatService.translations.chat }}\n    </div>\n\n    <ng-container *ngIf=\"(multiUserChatPlugin.rooms$ | async) as rooms\">\n        <ng-container *ngIf=\"rooms.length > 0\">\n            <div class=\"roster-group-header\">{{chatService.translations.rooms}}</div>\n\n            <div class=\"contact-list-wrapper\">\n                <ngx-chat-roster-recipient\n                        *ngFor=\"let room of rooms\"\n                        [recipient]=\"room\"\n                        (click)=\"onClickRecipient(room)\">\n                </ngx-chat-roster-recipient>\n            </div>\n        </ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"(contacts | async).length > 0\">\n        <div class=\"roster-group-header\">{{chatService.translations.contacts}}</div>\n\n        <div class=\"contact-list-wrapper\">\n\n            <ngx-chat-roster-recipient\n                    *ngFor=\"let contact of (contacts | async)\"\n                    [recipient]=\"contact\"\n                    (click)=\"onClickRecipient(contact)\">\n            </ngx-chat-roster-recipient>\n\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"(contactRequestsReceived$ | async).length > 0\">\n        <div class=\"roster-group-header\">{{chatService.translations.contactRequestIn}}</div>\n        <div class=\"contact-list-wrapper\">\n\n            <ngx-chat-roster-recipient\n                    *ngFor=\"let contact of (contactRequestsReceived$ | async)\"\n                    [recipient]=\"contact\"\n                    (click)=\"onClickRecipient(contact)\">\n            </ngx-chat-roster-recipient>\n\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"(contactRequestsSent$ | async).length > 0\">\n        <div class=\"roster-group-header\">{{chatService.translations.contactRequestOut}}</div>\n        <div class=\"contact-list-wrapper\">\n\n            <ngx-chat-roster-recipient\n                    *ngFor=\"let contact of (contactRequestsSent$ | async)\"\n                    [recipient]=\"contact\"\n                    (click)=\"onClickRecipient(contact)\">\n            </ngx-chat-roster-recipient>\n\n        </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"(contactsUnaffiliated$ | async).length > 0\">\n        <div class=\"roster-group-header\">{{chatService.translations.contactsUnaffiliated}}</div>\n        <div class=\"contact-list-wrapper\">\n\n            <ng-container *ngFor=\"let contact of (contactsUnaffiliated$ | async)\">\n                <ngx-chat-roster-recipient\n                        *ngIf=\"contact.messages.length > 0\"\n                        [recipient]=\"contact\"\n                        (click)=\"onClickRecipient(contact)\">\n                </ngx-chat-roster-recipient>\n            </ng-container>\n\n        </div>\n    </ng-container>\n\n    <div class=\"roster-list__empty\" *ngIf=\"hasNoContacts$ | async\">\n        {{chatService.translations.noContacts}}\n    </div>\n\n    <ng-container *ngIf=\"chatService.enableDebugging\">\n        <hr/>\n\n        <div class=\"contact-pending-request-received-wrapper\">\n            debug contact requests in:\n            <div class=\"contact-pending-request-received\"\n                 *ngFor=\"let request of (chatService.contactRequestsReceived$ | async)\">\n                {{request.name}}\n            </div>\n        </div>\n\n        <hr/>\n\n        <div class=\"contact-pending-request-sent-wrapper\">\n            debug contact requests out:\n            <div class=\"contact-pending-request-sent\"\n                 *ngFor=\"let request of (chatService.contactRequestsSent$ | async)\">\n                {{request.name}}\n            </div>\n        </div>\n\n        <hr/>\n\n        <p>\n            debug contacts (count: {{ (chatService.contacts$ | async).length }})<br/>\n        </p>\n        <p *ngFor=\"let contact of (chatService.contacts$|async)\" style=\"margin-bottom: 1em\">\n            <em>{{contact.name}}:</em><br/>\n            subscription={{contact.subscription$ | async}}<br/>\n            presence={{contact.presence$ | async}}<br/>\n            pendingIn={{contact.pendingIn$ | async}}<br/>\n            pendingOut={{contact.pendingOut$ | async}}\n        </p>\n        <p class=\"roster-debug-state\">state: {{chatService.state$ | async}}</p>\n    </ng-container>\n\n    <!--\n    <div class=\"roster-footer\">\n    </div>\n    -->\n</div>\n", styles: ["@keyframes ngx-chat-message-in{0%{transform:translate(50px);opacity:0}to{transform:none;opacity:1}}@keyframes ngx-chat-message-out{0%{transform:translate(-50px);opacity:0}to{transform:none;opacity:1}}*{box-sizing:border-box;margin:0;padding:0;font-family:Helvetica,Arial,serif}.roster-list{position:fixed;top:0;bottom:0;right:0;width:14em;overflow-y:auto;border-left:1px solid #e1e1e1;z-index:80;margin-left:10px;background-color:#f5f5f5;text-align:left;padding:.5em .5em 0;display:flex;flex-direction:column}.roster-list .roster-header{text-align:center;margin-bottom:1em}.roster-list .roster-group-header{border-bottom:1px solid #e1e1e1;padding-bottom:.5em}.roster-list .roster-footer{border-top:1px solid #e1e1e1;width:14em;padding-top:.5em}.roster-list .contact-list-wrapper{margin-bottom:1em}.roster-list ngx-chat-roster-recipient{display:block;padding:.5em}.roster-list ngx-chat-roster-recipient:hover{background-color:#e8e8e8;cursor:pointer}.roster-list__empty{color:#999;text-align:center;margin-top:.5em;font-size:1.5em}.roster-drawer{top:0;bottom:0;right:14em;width:1em;position:fixed;z-index:80;cursor:pointer}.roster-drawer:hover{background-color:#1e1e1e33}.roster-drawer__button{top:50%;color:transparent;background-color:transparent;position:fixed;margin-left:.4rem}.roster-drawer:hover .roster-drawer__button{color:#fff}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [CHAT_SERVICE_TOKEN]
                }] }, { type: i1.ChatListStateService }]; }, propDecorators: { rosterState: [{
                type: Input
            }], contacts: [{
                type: Input
            }], contactRequestsReceived$: [{
                type: Input
            }], contactRequestsSent$: [{
                type: Input
            }], contactsUnaffiliated$: [{
                type: Input
            }], rosterStateChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,