import { xml } from '@xmpp/client';
import { BehaviorSubject, combineLatest, merge } from 'rxjs';
import { debounceTime, delay, distinctUntilChanged, map, share } from 'rxjs/operators';
import { Direction } from '../../../../core/message';
import { findSortedInsertionIndexLast } from '../../../../core/utils-array';
import { AbstractStanzaBuilder } from '../abstract-stanza-builder';
import { AbstractXmppPlugin } from './abstract-xmpp-plugin';
const STORAGE_NGX_CHAT_LAST_READ_DATE = 'ngxchat:unreadmessagedate';
const wrapperNodeName = 'entries';
const nodeName = 'last-read';
class LastReadEntriesNodeBuilder extends AbstractStanzaBuilder {
    constructor() {
        super(...arguments);
        this.lastReadNodes = [];
    }
    addLastReadNode(jid, date) {
        this.lastReadNodes.push(xml(nodeName, { jid, date }));
    }
    toStanza() {
        return xml(wrapperNodeName, {}, ...this.lastReadNodes);
    }
}
/**
 * Unofficial plugin using XEP-0163 / PubSub to track count of unread messages per recipient
 *
 * It publishes entries to a private PubSub-Node 'ngxchat:unreadmessagedate'
 * The stored elements look like this:
 * <item id="current">
 *     <entries>
 *         <last-read jid="user1@host1.tld" date="1546419050584"/>
 *         <last-read jid="user2@host1.tld" date="1546419050000"/>
 *     </entries>
 * </item>
 */
export class UnreadMessageCountPlugin extends AbstractXmppPlugin {
    constructor(chatService, chatMessageListRegistry, publishSubscribePlugin, entityTimePlugin, multiUserChatPlugin) {
        super();
        this.chatService = chatService;
        this.chatMessageListRegistry = chatMessageListRegistry;
        this.publishSubscribePlugin = publishSubscribePlugin;
        this.entityTimePlugin = entityTimePlugin;
        this.multiUserChatPlugin = multiUserChatPlugin;
        /**
         * emits as soon as the unread message count changes, you might want to debounce it with e.g. half a a second, as
         * new messages might be acknowledged in another session.
         */
        this.jidToUnreadCount$ = new BehaviorSubject(new Map());
        this.jidToLastReadTimestamp = new Map();
        this.recipientIdToMessageSubscription = new Map();
        this.chatMessageListRegistry.chatOpened$
            .pipe(delay(0))
            .subscribe(recipient => this.checkForUnreadCountChange(recipient));
        merge(multiUserChatPlugin.rooms$, this.chatService.contactCreated$.pipe(map(contact => [contact]))).subscribe(recipients => {
            for (const recipient of recipients) {
                const jid = recipient.jidBare.toString();
                if (!this.recipientIdToMessageSubscription.has(jid)) {
                    const messages$ = recipient.messages$;
                    const updateUnreadCountSubscription = messages$
                        .pipe(debounceTime(20))
                        .subscribe(() => this.checkForUnreadCountChange(recipient));
                    this.recipientIdToMessageSubscription.set(jid, updateUnreadCountSubscription);
                }
            }
        });
        this.publishSubscribePlugin.publish$
            .subscribe((event) => this.handlePubSubEvent(event));
        this.unreadMessageCountSum$ = combineLatest([this.jidToUnreadCount$, this.chatService.blockedContactIds$])
            .pipe(debounceTime(20), map(([jidToUnreadCount, blockedContactIdSet]) => {
            let sum = 0;
            for (const [recipientJid, count] of jidToUnreadCount) {
                if (!blockedContactIdSet.has(recipientJid)) {
                    sum += count;
                }
            }
            return sum;
        }), distinctUntilChanged(), share());
    }
    async checkForUnreadCountChange(recipient) {
        if (this.chatMessageListRegistry.isChatOpen(recipient)) {
            this.jidToLastReadTimestamp.set(recipient.jidBare.toString(), await this.entityTimePlugin.getNow());
            await this.persistLastSeenDates();
        }
        this.updateContactUnreadMessageState(recipient);
    }
    async onBeforeOnline() {
        const fetchedDates = await this.fetchLastSeenDates();
        this.mergeJidToDates(fetchedDates);
    }
    onOffline() {
        for (const subscription of this.recipientIdToMessageSubscription.values()) {
            subscription.unsubscribe();
        }
        this.recipientIdToMessageSubscription.clear();
        this.jidToLastReadTimestamp.clear();
        this.jidToUnreadCount$.next(new Map());
    }
    async fetchLastSeenDates() {
        const entries = await this.publishSubscribePlugin.retrieveNodeItems(STORAGE_NGX_CHAT_LAST_READ_DATE);
        return this.parseLastSeenDates(entries);
    }
    parseLastSeenDates(topLevelElements) {
        const result = new Map();
        if (topLevelElements.length === 1) {
            const [itemElement] = topLevelElements;
            for (const lastReadEntry of itemElement.getChild(wrapperNodeName).getChildren(nodeName)) {
                const { jid, date } = lastReadEntry.attrs;
                if (!isNaN(date)) {
                    result.set(jid, date);
                }
            }
        }
        return result;
    }
    updateContactUnreadMessageState(recipient) {
        const contactJid = recipient.jidBare.toString();
        const lastReadDate = this.jidToLastReadTimestamp.get(contactJid) || 0;
        const contactUnreadMessageCount = this.calculateUnreadMessageCount(recipient, lastReadDate);
        const jidToCount = this.jidToUnreadCount$.getValue();
        if (jidToCount.get(contactJid) !== contactUnreadMessageCount) {
            this.jidToUnreadCount$.next(jidToCount.set(contactJid, contactUnreadMessageCount));
        }
    }
    calculateUnreadMessageCount(recipient, lastReadTimestamp) {
        const firstUnreadMessageIndex = findSortedInsertionIndexLast(lastReadTimestamp, recipient.messages, message => message.datetime.getTime());
        return recipient.messages.slice(firstUnreadMessageIndex)
            .filter(message => message.direction === Direction.in)
            .length;
    }
    async persistLastSeenDates() {
        const lastReadNodeBuilder = new LastReadEntriesNodeBuilder();
        for (const [jid, date] of this.jidToLastReadTimestamp) {
            lastReadNodeBuilder.addLastReadNode(jid, date.toString());
        }
        await this.publishSubscribePlugin.storePrivatePayloadPersistent(STORAGE_NGX_CHAT_LAST_READ_DATE, 'current', lastReadNodeBuilder.toStanza());
    }
    handlePubSubEvent(event) {
        const items = event.getChild('items');
        const itemsNode = items && items.attrs.node;
        const item = items && items.getChildren('item');
        if (itemsNode === STORAGE_NGX_CHAT_LAST_READ_DATE && item) {
            const publishedLastJidToDate = this.parseLastSeenDates(item);
            this.mergeJidToDates(publishedLastJidToDate);
        }
    }
    mergeJidToDates(newJidToDate) {
        for (const [jid, date] of newJidToDate) {
            const oldLastReadDate = this.jidToLastReadTimestamp.get(jid);
            if (!oldLastReadDate || oldLastReadDate < date) {
                this.jidToLastReadTimestamp.set(jid, date);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,