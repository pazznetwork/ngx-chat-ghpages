import { ReplaySubject } from 'rxjs';
import { dummyAvatarRoom } from '../../../../../core/contact-avatar';
import { MessageStore } from '../../../../../core/message-store';
import { jid as parseJid } from '@xmpp/client';
import { isJid } from '../../../../../core/recipient';
export class Room {
    constructor(roomJid, logService) {
        this.logService = logService;
        this.recipientType = 'room';
        this.description = '';
        this.subject = '';
        this.avatar = dummyAvatarRoom;
        this.metadata = {};
        this.roomOccupants = new Map();
        this.onOccupantChangeSubject = new ReplaySubject(Infinity, 1000);
        this.onOccupantChange$ = this.onOccupantChangeSubject.asObservable();
        this.occupantsSubject = new ReplaySubject(1);
        this.occupants$ = this.occupantsSubject.asObservable();
        this.roomJid = roomJid.bare();
        this.name = undefined;
        this.messageStore = new MessageStore(logService);
    }
    get nick() {
        return this.occupantJid?.resource;
    }
    set nick(nick) {
        const occupantJid = parseJid(this.roomJid.toString());
        occupantJid.resource = nick;
        this.occupantJid = occupantJid;
    }
    get name() {
        return this._name;
    }
    set name(name) {
        this._name = !!name ? name : this.roomJid.local;
    }
    get jidBare() {
        return this.roomJid;
    }
    get messages$() {
        return this.messageStore.messages$;
    }
    get messages() {
        return this.messageStore.messages;
    }
    get dateMessagesGroups() {
        return this.messageStore.dateMessageGroups;
    }
    get oldestMessage() {
        return this.messageStore.oldestMessage;
    }
    get mostRecentMessage() {
        return this.messageStore.mostRecentMessage;
    }
    get mostRecentMessageReceived() {
        return this.messageStore.mostRecentMessageReceived;
    }
    get mostRecentMessageSent() {
        return this.messageStore.mostRecentMessageSent;
    }
    addMessage(message) {
        this.messageStore.addMessage(message);
    }
    equalsBareJid(other) {
        if (other instanceof Room || isJid(other)) {
            const otherJid = other instanceof Room ? other.roomJid : other.bare();
            return this.roomJid.equals(otherJid);
        }
        return false;
    }
    hasOccupant(occupantJid) {
        return this.roomOccupants.has(occupantJid.toString());
    }
    getOccupant(occupantJid) {
        return this.roomOccupants.get(occupantJid.toString());
    }
    handleOccupantJoined(occupant, isCurrentUser) {
        this.addOccupant(occupant);
        this.onOccupantChangeSubject.next({ change: 'joined', occupant, isCurrentUser });
        this.logService.debug(`occupant joined room: occupantJid=${occupant.occupantJid.toString()}, roomJid=${this.roomJid.toString()}`);
        return true;
    }
    handleOccupantLeft(occupant, isCurrentUser) {
        this.removeOccupant(occupant, isCurrentUser);
        this.logService.debug(`occupant left room: occupantJid=${occupant.occupantJid.toString()}, roomJid=${this.roomJid.toString()}`);
        this.onOccupantChangeSubject.next({ change: 'left', occupant, isCurrentUser });
        return true;
    }
    handleOccupantConnectionError(occupant, isCurrentUser) {
        this.removeOccupant(occupant, isCurrentUser);
        this.logService.debug(`occupant left room due to connection error: occupantJid=${occupant.occupantJid.toString()}, roomJid=${this.roomJid.toString()}`);
        this.onOccupantChangeSubject.next({ change: 'leftOnConnectionError', occupant, isCurrentUser });
        return true;
    }
    handleOccupantKicked(occupant, isCurrentUser, actor, reason) {
        this.removeOccupant(occupant, isCurrentUser);
        if (isCurrentUser) {
            this.logService.info(`you got kicked from room! roomJid=${this.roomJid.toString()}, by=${actor}, reason=${reason}`);
        }
        this.logService.debug(`occupant got kicked: occupantJid=${occupant.occupantJid.toString()}, roomJid=${this.roomJid.toString()}`);
        this.onOccupantChangeSubject.next({ change: 'kicked', occupant, isCurrentUser, actor, reason });
        return true;
    }
    handleOccupantBanned(occupant, isCurrentUser, actor, reason) {
        this.removeOccupant(occupant, isCurrentUser);
        if (isCurrentUser) {
            this.logService.info(`you got banned from room! roomJid=${this.roomJid.toString()}, by=${actor}, reason=${reason}`);
        }
        this.logService.debug(`occupant got banned: occupantJid=${occupant.occupantJid.toString()}, roomJid=${this.roomJid.toString()}`);
        this.onOccupantChangeSubject.next({ change: 'banned', occupant, isCurrentUser, actor, reason });
        return true;
    }
    handleOccupantLostMembership(occupant, isCurrentUser) {
        this.removeOccupant(occupant, isCurrentUser);
        if (isCurrentUser) {
            this.logService.info(`your membership got revoked and you got kicked from member-only room: ${this.roomJid.toString()}`);
        }
        this.onOccupantChangeSubject.next({ change: 'lostMembership', occupant, isCurrentUser });
        return true;
    }
    handleOccupantChangedNick(occupant, isCurrentUser, newNick) {
        if (isCurrentUser) {
            this.nick = newNick;
        }
        let existingOccupant = this.roomOccupants.get(occupant.occupantJid.toString());
        if (!existingOccupant) {
            existingOccupant = { ...occupant };
            existingOccupant.occupantJid = parseJid(occupant.occupantJid.toString());
        }
        existingOccupant.occupantJid.resource = newNick;
        existingOccupant.nick = newNick;
        this.roomOccupants.delete(occupant.occupantJid.toString());
        this.roomOccupants.set(existingOccupant.occupantJid.toString(), existingOccupant);
        this.logService.debug(`occupant changed nick: from=${occupant.nick}, to=${newNick}, occupantJid=${occupant.occupantJid.toString()}, roomJid=${this.roomJid.toString()}`);
        this.onOccupantChangeSubject.next({ change: 'changedNick', occupant, newNick, isCurrentUser });
        return true;
    }
    handleOccupantModified(occupant, oldOccupant, isCurrentUser) {
        this.logService.debug(`occupant changed: from=${JSON.stringify(oldOccupant)}, to=${JSON.stringify(occupant)}`);
        this.onOccupantChangeSubject.next({ change: 'modified', occupant, oldOccupant, isCurrentUser });
        return true;
    }
    equals(other) {
        if (this === other) {
            return true;
        }
        if (other == null || !(other instanceof Room)) {
            return false;
        }
        return this.roomJid.equals(other.roomJid);
    }
    addOccupant(occupant) {
        this.roomOccupants.set(occupant.occupantJid.toString(), occupant);
        this.occupantsSubject.next([...this.roomOccupants.values()]);
    }
    removeOccupant(occupant, isCurrentUser) {
        if (isCurrentUser) {
            this.roomOccupants.clear();
            this.occupantsSubject.next([]);
        }
        else {
            if (this.roomOccupants.delete(occupant.occupantJid.toString())) {
                this.occupantsSubject.next([...this.roomOccupants.values()]);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,