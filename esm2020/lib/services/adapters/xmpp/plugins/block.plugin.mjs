import { xml } from '@xmpp/client';
import { BehaviorSubject } from 'rxjs';
import { AbstractXmppPlugin } from './abstract-xmpp-plugin';
/**
 * XEP-0191: Blocking Command
 * https://xmpp.org/extensions/xep-0191.html
 */
export class BlockPlugin extends AbstractXmppPlugin {
    constructor(xmppChatAdapter, serviceDiscoveryPlugin) {
        super();
        this.xmppChatAdapter = xmppChatAdapter;
        this.serviceDiscoveryPlugin = serviceDiscoveryPlugin;
        this.supportsBlock$ = new BehaviorSubject('unknown');
    }
    async onBeforeOnline() {
        const supportsBlock = await this.determineSupportForBlock();
        this.supportsBlock$.next(supportsBlock);
        if (supportsBlock) {
            await this.requestBlockedJids();
        }
    }
    async determineSupportForBlock() {
        try {
            return await this.serviceDiscoveryPlugin.supportsFeature(this.xmppChatAdapter.chatConnectionService.userJid.domain, 'urn:xmpp:blocking');
        }
        catch (e) {
            return false;
        }
    }
    onOffline() {
        this.supportsBlock$.next('unknown');
        this.xmppChatAdapter.blockedContactIds$.next(new Set());
    }
    blockJid(jid) {
        return this.xmppChatAdapter.chatConnectionService.sendIq(xml('iq', { type: 'set' }, xml('block', { xmlns: 'urn:xmpp:blocking' }, xml('item', { jid }))));
    }
    unblockJid(jid) {
        return this.xmppChatAdapter.chatConnectionService.sendIq(xml('iq', { type: 'set' }, xml('unblock', { xmlns: 'urn:xmpp:blocking' }, xml('item', { jid }))));
    }
    async requestBlockedJids() {
        const blockListResponse = await this.xmppChatAdapter.chatConnectionService.sendIq(xml('iq', { type: 'get' }, xml('blocklist', { xmlns: 'urn:xmpp:blocking' })));
        const blockedJids = blockListResponse
            .getChild('blocklist')
            .getChildren('item')
            .map(e => e.attrs.jid);
        this.xmppChatAdapter.blockedContactIds$.next(new Set(blockedJids));
    }
    handleStanza(stanza) {
        const { from } = stanza.attrs;
        if (from && from === this.xmppChatAdapter.chatConnectionService.userJid?.bare().toString()) {
            const blockPush = stanza.getChild('block', 'urn:xmpp:blocking');
            const unblockPush = stanza.getChild('unblock', 'urn:xmpp:blocking');
            const blockList = this.xmppChatAdapter.blockedContactIds$.getValue();
            if (blockPush) {
                blockPush.getChildren('item')
                    .map(e => e.attrs.jid)
                    .forEach(jid => blockList.add(jid));
                this.xmppChatAdapter.blockedContactIds$.next(blockList);
                return true;
            }
            else if (unblockPush) {
                const jidsToUnblock = unblockPush.getChildren('item').map(e => e.attrs.jid);
                if (jidsToUnblock.length === 0) {
                    // unblock everyone
                    blockList.clear();
                }
                else {
                    // unblock individually
                    jidsToUnblock.forEach(jid => blockList.delete(jid));
                }
                this.xmppChatAdapter.blockedContactIds$.next(blockList);
                return true;
            }
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,