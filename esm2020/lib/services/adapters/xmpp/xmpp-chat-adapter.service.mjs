import { Injectable } from '@angular/core';
import { jid as parseJid } from '@xmpp/client';
import { BehaviorSubject, combineLatest, merge, Subject } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { dummyAvatarContact } from '../../../core/contact-avatar';
import { defaultTranslations } from '../../../core/translations-default';
import { MessageArchivePlugin } from './plugins/message-archive.plugin';
import { MessagePlugin } from './plugins/message.plugin';
import { MultiUserChatPlugin } from './plugins/multi-user-chat/multi-user-chat.plugin';
import { RosterPlugin } from './plugins/roster.plugin';
import * as i0 from "@angular/core";
import * as i1 from "./xmpp-chat-connection.service";
import * as i2 from "../../log.service";
import * as i3 from "../../contact-factory.service";
export class XmppChatAdapter {
    constructor(chatConnectionService, logService, contactFactory) {
        this.chatConnectionService = chatConnectionService;
        this.logService = logService;
        this.contactFactory = contactFactory;
        this.message$ = new Subject();
        this.messageSent$ = new Subject();
        this.contacts$ = new BehaviorSubject([]);
        this.contactCreated$ = new Subject();
        this.blockedContactIds$ = new BehaviorSubject(new Set());
        this.blockedContacts$ = combineLatest([this.contacts$, this.blockedContactIds$])
            .pipe(map(([contacts, blockedJids]) => contacts.filter(contact => blockedJids.has(contact.jidBare.toString()))));
        this.notBlockedContacts$ = combineLatest([this.contacts$, this.blockedContactIds$])
            .pipe(map(([contacts, blockedJids]) => contacts.filter(contact => !blockedJids.has(contact.jidBare.toString()))));
        this.contactsSubscribed$ = this.notBlockedContacts$.pipe(map(contacts => contacts.filter(contact => contact.isSubscribed())));
        this.contactRequestsReceived$ = this.notBlockedContacts$.pipe(map(contacts => contacts.filter(contact => contact.pendingIn$.getValue())));
        this.contactRequestsSent$ = this.notBlockedContacts$.pipe(map(contacts => contacts.filter(contact => contact.pendingOut$.getValue())));
        this.contactsUnaffiliated$ = this.notBlockedContacts$.pipe(map(contacts => contacts.filter(contact => contact.isUnaffiliated() && contact.messages.length > 0)));
        this.state$ = new BehaviorSubject('disconnected');
        this.plugins = [];
        this.enableDebugging = false;
        this.userAvatar$ = new BehaviorSubject(dummyAvatarContact);
        this.translations = defaultTranslations();
        this.chatActions = [{
                id: 'sendMessage',
                cssClass: 'chat-window-send',
                html: '&raquo;',
                onClick: (chatActionContext) => {
                    chatActionContext.chatWindow.sendMessage();
                },
            }];
        this.state$.subscribe((state) => this.logService.info('state changed to:', state));
        chatConnectionService.state$
            .pipe(filter(nextState => nextState !== this.state$.getValue()))
            .subscribe((nextState) => {
            this.handleInternalStateChange(nextState);
        });
        this.chatConnectionService.stanzaUnknown$.subscribe((stanza) => this.onUnknownStanza(stanza));
        merge(this.messageSent$, this.message$).subscribe(() => {
            // re-emit contacts when sending or receiving a message to refresh contact groups
            // if the sending contact was in 'other', he still is in other now, but passes the 'messages.length > 0' predicate, so that
            // he should be seen now.
            this.contacts$.next(this.contacts$.getValue());
        });
    }
    handleInternalStateChange(newState) {
        if (newState === 'online') {
            this.state$.next('connecting');
            Promise
                .all(this.plugins.map(plugin => plugin.onBeforeOnline()))
                .catch((e) => this.logService.error('error while connecting', e))
                .finally(() => this.announceAvailability());
        }
        else {
            if (this.state$.getValue() === 'online') {
                // clear data the first time we transition to a not-online state
                this.onOffline();
            }
            this.state$.next('disconnected');
        }
    }
    onOffline() {
        this.contacts$.next([]);
        this.plugins.forEach(plugin => {
            try {
                plugin.onOffline();
            }
            catch (e) {
                this.logService.error('error while handling offline in ', plugin);
            }
        });
    }
    announceAvailability() {
        this.logService.info('announcing availability');
        this.chatConnectionService.sendPresence();
        this.state$.next('online');
    }
    addPlugins(plugins) {
        plugins.forEach(plugin => {
            this.plugins.push(plugin);
        });
    }
    reloadContacts() {
        this.getPlugin(RosterPlugin).refreshRosterContacts();
    }
    getContactById(jidPlain) {
        const bareJidToFind = parseJid(jidPlain).bare();
        return this.contacts$.getValue().find(contact => contact.jidBare.equals(bareJidToFind));
    }
    getOrCreateContactById(jidPlain, name) {
        let contact = this.getContactById(jidPlain);
        if (!contact) {
            contact = this.contactFactory.createContact(parseJid(jidPlain).bare().toString(), name);
            this.contacts$.next([contact, ...this.contacts$.getValue()]);
            this.contactCreated$.next(contact);
        }
        return contact;
    }
    addContact(identifier) {
        this.getPlugin(RosterPlugin).addRosterContact(identifier);
    }
    removeContact(identifier) {
        this.getPlugin(RosterPlugin).removeRosterContact(identifier);
    }
    async logIn(logInRequest) {
        this.lastLogInRequest = logInRequest;
        if (this.state$.getValue() === 'disconnected') {
            await this.chatConnectionService.logIn(logInRequest);
        }
    }
    logOut() {
        return this.chatConnectionService.logOut();
    }
    async sendMessage(recipient, body) {
        const trimmedBody = body.trim();
        if (trimmedBody.length === 0) {
            return;
        }
        switch (recipient.recipientType) {
            case 'room':
                await this.getPlugin(MultiUserChatPlugin).sendMessage(recipient, trimmedBody);
                break;
            case 'contact':
                this.getPlugin(MessagePlugin).sendMessage(recipient, trimmedBody);
                this.messageSent$.next(recipient);
                break;
            default:
                throw new Error('invalid recipient type: ' + recipient?.recipientType);
        }
    }
    loadCompleteHistory() {
        return this.getPlugin(MessageArchivePlugin).loadAllMessages();
    }
    getPlugin(constructor) {
        for (const plugin of this.plugins) {
            if (plugin.constructor === constructor) {
                return plugin;
            }
        }
        throw new Error('plugin not found: ' + constructor);
    }
    onUnknownStanza(stanza) {
        let handled = false;
        for (const plugin of this.plugins) {
            try {
                if (plugin.handleStanza(stanza)) {
                    this.logService.debug(plugin.constructor.name, 'handled', stanza.toString());
                    handled = true;
                }
            }
            catch (e) {
                this.logService.error('error handling stanza in ', plugin.constructor.name, e);
            }
        }
        if (!handled) {
            this.logService.warn('unknown stanza <=', stanza.toString());
        }
    }
    reconnectSilently() {
        this.chatConnectionService.reconnectSilently();
    }
    reconnect() {
        return this.logIn(this.lastLogInRequest);
    }
}
XmppChatAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: XmppChatAdapter, deps: [{ token: i1.XmppChatConnectionService }, { token: i2.LogService }, { token: i3.ContactFactoryService }], target: i0.ɵɵFactoryTarget.Injectable });
XmppChatAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: XmppChatAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: XmppChatAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.XmppChatConnectionService }, { type: i2.LogService }, { type: i3.ContactFactoryService }]; } });
//# sourceMappingURL=data:application/json;base64,