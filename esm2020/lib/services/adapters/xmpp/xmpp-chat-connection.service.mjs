import { Injectable } from '@angular/core';
import { xml } from '@xmpp/client';
import { BehaviorSubject, Subject } from 'rxjs';
import { XmppResponseError } from './xmpp-response.error';
import * as i0 from "@angular/core";
import * as i1 from "../../log.service";
import * as i2 from "./xmpp-client-factory.service";
/**
 * Implementation of the XMPP specification according to RFC 6121.
 * @see https://xmpp.org/rfcs/rfc6121.html
 * @see https://xmpp.org/rfcs/rfc3920.html
 * @see https://xmpp.org/rfcs/rfc3921.html
 */
export class XmppChatConnectionService {
    constructor(logService, ngZone, xmppClientFactoryService) {
        this.logService = logService;
        this.ngZone = ngZone;
        this.xmppClientFactoryService = xmppClientFactoryService;
        this.state$ = new BehaviorSubject('disconnected');
        this.stanzaUnknown$ = new Subject();
        this.requestId = new Date().getTime();
        this.stanzaResponseHandlers = new Map();
    }
    onOnline(jid) {
        this.logService.info('online =', 'online as', jid.toString());
        this.userJid = jid;
        this.state$.next('online');
    }
    onOffline() {
        this.stanzaResponseHandlers.forEach(([, reject]) => reject(new Error('offline')));
        this.stanzaResponseHandlers.clear();
    }
    async sendPresence() {
        await this.send(xml('presence'));
    }
    async send(content) {
        this.logService.debug('>>>', content);
        await this.client.send(content);
    }
    sendAwaitingResponse(request) {
        return new Promise((resolve, reject) => {
            request.attrs = {
                id: this.getNextRequestId(),
                from: this.userJid.toString(),
                ...request.attrs,
            };
            const { id } = request.attrs;
            this.stanzaResponseHandlers.set(id, [
                (response) => {
                    if (response.attrs.type === 'error') {
                        reject(new XmppResponseError(response));
                        return;
                    }
                    resolve(response);
                },
                reject,
            ]);
            this.send(request).catch((e) => {
                this.logService.error('error sending stanza', e);
                this.stanzaResponseHandlers.delete(id);
                reject(e);
            });
        });
    }
    onStanzaReceived(stanza) {
        let handled = false;
        const [handleResponse] = this.stanzaResponseHandlers.get(stanza.attrs.id) ?? [];
        if (handleResponse) {
            this.logService.debug('<<<', stanza.toString(), 'handled by response handler');
            this.stanzaResponseHandlers.delete(stanza.attrs.id);
            handleResponse(stanza);
            handled = true;
        }
        if (!handled) {
            this.stanzaUnknown$.next(stanza);
        }
    }
    async sendIq(request) {
        const requestType = request.attrs.type;
        // see https://datatracker.ietf.org/doc/html/draft-ietf-xmpp-3920bis#section-8.2.3
        if (!requestType || (requestType !== 'get' && requestType !== 'set')) {
            const message = `iq stanza without type: ${request.toString()}`;
            this.logService.error(message);
            throw new Error(message);
        }
        const response = await this.sendAwaitingResponse(request);
        if (!this.isIqStanzaResponse(response)) {
            throw new Error(`received unexpected stanza as iq response: type=${response.attrs.type}, stanza=${response.toString()}`);
        }
        return response;
    }
    isIqStanzaResponse(stanza) {
        const stanzaType = stanza.attrs.type;
        return stanza.name === 'iq' && (stanzaType === 'result' || stanzaType === 'error');
    }
    async sendIqAckResult(id) {
        await this.send(xml('iq', { from: this.userJid.toString(), id, type: 'result' }));
    }
    async logIn(logInRequest) {
        await this.ngZone.runOutsideAngular(async () => {
            if (logInRequest.username.indexOf('@') >= 0) {
                this.logService.warn('username should not contain domain, only local part, this can lead to errors!');
            }
            this.client = this.xmppClientFactoryService.client(logInRequest);
            this.client.on('error', (err) => {
                this.ngZone.run(() => {
                    this.logService.error('chat service error =>', err.toString(), err);
                });
            });
            this.client.on('status', (status, value) => {
                this.ngZone.run(() => {
                    this.logService.info('status update =', status, value ? JSON.stringify(value) : '');
                    if (status === 'offline') {
                        this.state$.next('disconnected');
                    }
                });
            });
            this.client.on('online', (jid) => {
                return this.ngZone.run(() => {
                    return this.onOnline(jid);
                });
            });
            this.client.on('stanza', (stanza) => {
                this.ngZone.run(() => {
                    if (this.skipXmppClientResponses(stanza)) {
                        return;
                    }
                    this.onStanzaReceived(stanza);
                });
            });
            this.client.on('disconnect', () => {
                this.ngZone.run(() => {
                    this.state$.next('reconnecting');
                });
            });
            this.client.on('offline', () => {
                this.ngZone.run(() => {
                    this.onOffline();
                });
            });
            await this.client.start();
        });
    }
    /**
     * We should skip our iq handling for the following xmpp/client response:
     * - resource bind on start by https://xmpp.org/rfcs/rfc6120.html#bind
     */
    skipXmppClientResponses(stanza) {
        const xmppBindNS = 'urn:ietf:params:xml:ns:xmpp-bind';
        return stanza.getChild('bind')?.getNS() === xmppBindNS;
    }
    async logOut() {
        // TODO: move this to a presence plugin in a handler
        this.logService.debug('logging out');
        if (this.client) {
            this.client.reconnect.stop();
            try {
                await this.send(xml('presence', { type: 'unavailable' }));
            }
            catch (e) {
                this.logService.error('error sending presence unavailable');
            }
            finally {
                this.client.stop();
            }
        }
    }
    getNextRequestId() {
        return String(this.requestId++);
    }
    reconnectSilently() {
        this.logService.warn('hard reconnect...');
        this.state$.next('disconnected');
    }
}
XmppChatConnectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.6", ngImport: i0, type: XmppChatConnectionService, deps: [{ token: i1.LogService }, { token: i0.NgZone }, { token: i2.XmppClientFactoryService }], target: i0.ɵɵFactoryTarget.Injectable });
XmppChatConnectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.6", ngImport: i0, type: XmppChatConnectionService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.6", ngImport: i0, type: XmppChatConnectionService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LogService }, { type: i0.NgZone }, { type: i2.XmppClientFactoryService }]; } });
//# sourceMappingURL=data:application/json;base64,