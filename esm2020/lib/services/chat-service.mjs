import { InjectionToken } from '@angular/core';
/**
 * The chat service token gives you access to the main chat api and is implemented by default with an XMPP adapter,
 * you can always reuse the api and ui with a new service implementing the ChatService interface and providing the
 * said implementation with the token
 */
export const CHAT_SERVICE_TOKEN = new InjectionToken('ngxChatService');
//# sourceMappingURL=data:application/json;base64,