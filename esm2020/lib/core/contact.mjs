import { jid as parseJid } from '@xmpp/client';
import { BehaviorSubject } from 'rxjs';
import { dummyAvatarContact } from './contact-avatar';
import { MessageStore } from './message-store';
import { Presence } from './presence';
import { isJid } from './recipient';
import { ContactSubscription } from './subscription';
export class Contact {
    /**
     * Do not call directly, use {@link ContactFactoryService#createContact} instead.
     */
    constructor(jidPlain, name, logService, avatar) {
        this.name = name;
        this.recipientType = 'contact';
        this.avatar = dummyAvatarContact;
        this.metadata = {};
        this.presence$ = new BehaviorSubject(Presence.unavailable);
        this.subscription$ = new BehaviorSubject(ContactSubscription.none);
        this.pendingOut$ = new BehaviorSubject(false);
        this.pendingIn$ = new BehaviorSubject(false);
        this.resources$ = new BehaviorSubject(new Map());
        this.pendingRoomInvite$ = new BehaviorSubject(null);
        if (avatar) {
            this.avatar = avatar;
        }
        const jid = parseJid(jidPlain);
        this.jidFull = jid;
        this.jidBare = jid.bare();
        this.messageStore = new MessageStore(logService);
    }
    get messages$() {
        return this.messageStore.messages$;
    }
    get messages() {
        return this.messageStore.messages;
    }
    get dateMessagesGroups() {
        return this.messageStore.dateMessageGroups;
    }
    get oldestMessage() {
        return this.messageStore.oldestMessage;
    }
    get mostRecentMessage() {
        return this.messageStore.mostRecentMessage;
    }
    get mostRecentMessageReceived() {
        return this.messageStore.mostRecentMessageReceived;
    }
    get mostRecentMessageSent() {
        return this.messageStore.mostRecentMessageSent;
    }
    addMessage(message) {
        this.messageStore.addMessage(message);
    }
    equalsBareJid(other) {
        if (other instanceof Contact || isJid(other)) {
            const otherJid = other instanceof Contact ? other.jidBare : other.bare();
            return this.jidBare.equals(otherJid);
        }
        return false;
    }
    isSubscribed() {
        const subscription = this.subscription$.getValue();
        return subscription === ContactSubscription.both || subscription === ContactSubscription.to;
    }
    isUnaffiliated() {
        return !this.isSubscribed() && !this.pendingIn$.getValue() && !this.pendingOut$.getValue();
    }
    updateResourcePresence(jid, presence) {
        const resources = this.resources$.getValue();
        resources.set(jid, presence);
        this.presence$.next(this.determineOverallPresence(resources));
        this.resources$.next(resources);
    }
    getMessageById(id) {
        return this.messageStore.messageIdToMessage.get(id);
    }
    determineOverallPresence(jidToPresence) {
        let result = Presence.unavailable;
        [...jidToPresence.values()].some((presence) => {
            if (presence === Presence.present) {
                result = presence;
                return true;
            }
            else if (presence === Presence.away) {
                result = Presence.away;
            }
            return false;
        });
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,